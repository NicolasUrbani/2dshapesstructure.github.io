% Generate JSON files for each segmentation indincating which parts have
% been selected as similar

load("userstudy2-processed.mat");

nb_selections = size(selection, 1);
text_buffer = "";


for i=1:10
    %Get selection parameters
    id_selection = selection{i,1};
    shapename = selection{i,2};
    shape_selection = selection{i,3};
    
    %HashMap to store the associations
    similarities = containers.Map;
    fileID = fopen(['JSON/PartsSimilarity/' shapename '_' shape_selection],'w');
    if fileID == -1
        disp("File open error!");
    end
    text_buffer = strcat(text_buffer, "{similarity: [ ");
    %Find the partId of the parts in the selection
    partIds = find(parts(:,1) == id_selection);
    for j=1:size(partIds,1)
        %Find all annotations with part j as part1
        annotations = partsannotation(find(partsannotation(:,3)== j),:);
        for k=1:size(annotations,1)
            team_id = annotations(k,1);
            ind_part = int2str(partIds(j));
            ind_team = int2str(team_id);
            if (~isKey(similarities,ind_part))
                similarities(ind_part) = containers.Map;
            end
            part_map = similarities(ind_part);
            if (~isKey(part_map,"context"))
                part_map("context") = containers.Map;
            end
            if (~isKey(part_map,"nocontext"))
                part_map("nocontext") = containers.Map;
            end
            if (annotations(k,2) ==1 )
                key= "context";
            else
                key  ="nocontext";
            end
            tmp = part_map("nocontext");
                if (~isKey(tmp,ind_team))
                    tmp(ind_team) = [];
                end
                tmp(ind_team) = [tmp(ind_team) annotations(k,3)];
                part_map("nocontext") = tmp;
            similarities(ind_part) = tmp;
        end
    end
    
    
    
end